user  vcap vcap;
worker_processes  2;

error_log /var/vcap/sys/log/secureproxy/secureproxy.error.log notice;
pid       /var/vcap/sys/run/secureproxy/secureproxy.pid;

worker_rlimit_nofile 40000;

events {
  worker_connections  8096;
  multi_accept        on;
  use                 epoll;
}

http {

  ##
  # Basic stuff
  ##

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 1200;
  types_hash_max_size 2048;
  server_tokens off;

  include /var/vcap/packages/secureproxy/nginx/conf/mime.types;
  default_type application/octet-stream;
  types {
    text/plain log;
    text/plain asc;
  }

  ##
  # Logging
  ##

  log_format  main  '$remote_addr - [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" $request_time '
            '$upstream_response_time $pipe';

  access_log /var/vcap/sys/log/secureproxy/access.log main;

  ##
  # Gzip
  ##

  gzip on;
  gzip_disable "msie6";
  gzip_vary on;
  gzip_types  text/plain text/css application/x-javascript application/json text/xml application/xml application/xml+rss text/javascript application/rss+xml application/javascript;


  ##
  # Timeout variables (currently disabled)
  ##

  # client_header_timeout   10m;
  client_body_timeout 10m;
  # send_timeout        10m;
  client_max_body_size 1024m;

  # connection_pool_size        256;
  # client_header_buffer_size   16k;
  large_client_header_buffers 4 16k;
  # request_pool_size       16k;

  # Add map for websockets
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # Add secure header values if not set upstream, else add headers with the
  # implicit default value of empty string, which is ignored by the `add_header`
  # directive.
  map $upstream_http_strict_transport_security $sts {
    '' 'max-age=31536000';
  }
  map $upstream_http_x_frame_options $frame_options {
    default    '$upstream_http_x_frame_options';
    ''         'DENY';
    'ALLOWALL' '';
  }
  map $upstream_http_x_content_type_options $content_type_options {
    '' 'nosniff';
  }
  map $upstream_http_x_xss_protection $xss_protection {
    '' '1; mode=block';
  }
  map $upstream_http_content_type $default_content_type {
    '' 'text/plain; charset=utf-8';
  }

  lua_package_path "/var/vcap/packages/secureproxy/lualib/?.lua;/var/vcap/jobs/secureproxy/config/?.lua";

  # hack to enable startup logging
  # https://github.com/openresty/lua-nginx-module/issues/467#issuecomment-305578531
  lua_shared_dict workaround 12k;

  init_by_lua_block {
    cjson = require "cjson"
    ngx_re = require "ngx.re"
    tic = require "tic"
    local whitelist = require "ip_whitelist"

    ip_whitelist = whitelist.get_whitelist()
    host_whitelist = whitelist.get_host_whitelist()
    proxy_whitelist = whitelist.get_proxy_whitelist()

    ip_whitelist_size = 0

    local info = ""
    for k,v in pairs(whitelist.get_human_whitelist()) do
      ip_whitelist_size = ip_whitelist_size + 1
      info = info..k..":\n"

      for kk, vv in ipairs(v) do
        info = info.."- "..vv.."\n"
      end
    end

    info = "Loaded ip_whitelist for "..ip_whitelist_size.." domains:\n"..info
    ngx.log(ngx.NOTICE, info)
    ngx.log(ngx.NOTICE, cjson.encode(ip_whitelist))
  }

  server {

<% if_p("secureproxy.listen_port") do |http_port| %>
    listen <%= http_port %>;
    set $local_proxy "http://127.0.0.1:<%= p("secureproxy.proxy_port") %>";
<% end %>

<% if_p("secureproxy.https_listen_port") do |https_port| %>
    listen <%= https_port %> ssl;
    ssl_certificate cert.crt;
    ssl_certificate_key priv.key;
    set $local_proxy "https://127.0.0.1:<%= p("secureproxy.https_proxy_port") %>";
<% end %>

    server_name  _;
    more_clear_headers 'Server';

    # proxy all traffic
    location / {

      # redirect all http traffic to https
      if ($http_x_forwarded_proto = http) {
        return 301 https://$host$request_uri;
      }

      ##
      # Security
      ##

      add_header Strict-Transport-Security $sts always;
      add_header X-Content-Type-Options $content_type_options always;
      add_header X-XSS-Protection $xss_protection always;
      add_header Content-Type $default_content_type always;

      # Clear X-Frame-Options before setting so that ALLOWALL is cleared if set
      more_clear_headers X-Frame-Options;
      more_set_headers "X-Frame-Options: $frame_options";

      ##
      # Implement per-domain IP Whitelist
      ##

      access_by_lua_block {
        -- bail fast if we don't have a whitelist
        if ip_whitelist_size == 0 then
          return
        end

        local opts = {
          ip_whitelist=ip_whitelist,
          proxy_whitelist=proxy_whitelist,
          host_whitelist=host_whitelist,
          request_uri=ngx.var.request_uri,
          source_ip=ngx.var.remote_addr,
          headers=ngx.req.get_headers()
        }

        <% if_p('secureproxy.tic.secret') do |secret| %>
        opts.tic_secret = "<%= secret %>"
        <% end %>

        allow, filtered, source_ip, email = tic.check_ingress(opts)

        if not filtered then
          return
        end
        if allow then
          ngx.log(ngx.NOTICE, "PASS ", source_ip, " is in ", email[2], " whitelist (", email[1], email[2], ")")
          return
        else
          -- fail if the request isn't coming from a whitelisted range
          ngx.log(ngx.NOTICE, "FAIL ", source_ip, " is not in ", email[2], " whitelist (", email[1], email[2], ")")
          ngx.status = ngx.HTTP_FORBIDDEN
          ngx.header.content_type = "application/json; charset=utf-8"
          -- TODO: Should we be more informative in our error message, should we use a stock cloud controller error code
          ngx.say(cjson.encode({description="Authorization Error", error_code="SecureProxy-NotAuthorized", code=9162}))
          return ngx.exit(ngx.HTTP_FORBIDDEN)
        end
      }

    <% if p('secureproxy.proxy_port') %>
      fastcgi_param               HTTP_PROXY "";
    <% else %>
      fastcgi_param               HTTPS_PROXY "";
    <% end %>

      proxy_buffering             off;
      proxy_buffer_size           16k;
      proxy_buffers               4 16k;
      proxy_http_version          1.1;
      proxy_set_header            Upgrade $http_upgrade;
      proxy_set_header            Connection $connection_upgrade;
      proxy_set_header            Host $host;
      proxy_set_header            Proxy "";
      proxy_redirect              off;
      proxy_pass_request_headers  on;
      proxy_connect_timeout       10;
      proxy_read_timeout          600;
      proxy_pass                  $local_proxy;

    }

  }

  <%= p("secureproxy.custom_server_config") %>

}
